@page "/reading/{level:int}/"
@rendermode InteractiveServer

<PageTitle>Reading</PageTitle>

<h1>Reading @level Level</h1>

@if (isStartScreen)
{
    <p>Click the button below to start the reading level.</p>
    <button @onclick="OnStartClick">Start Reading Level</button>
}
else if (isReadingScreen)
{
    <p role="timer">Time: @taskTimer</p> 
    <p>@text</p>

    <button @onclick="OnReadingFinished">I've already read it!</button>
}
else if (isQuestionsScreen)
{
    <h2>@questionNumber Question! Please select the correct answer.</h2>
    <p>@question</p>

    <button @onclick="() => AnswerClick(1)" disabled="@isButtonsDisabled">@answer1</button>
    <button @onclick="() => AnswerClick(2)" disabled="@isButtonsDisabled">@answer2</button>
    <button @onclick="() => AnswerClick(3)" disabled="@isButtonsDisabled">@answer3</button>
    <button @onclick="() => AnswerClick(4)" disabled="@isButtonsDisabled">@answer4</button>

    if (isNextButtonEnabled || isEndButtonEnabled)
    {
        if(isNextButtonEnabled){
			<p>Your answer: @correct</p>
			<button @onclick="OnNextQuestion">Next Question</button>
		}
		else if(isEndButtonEnabled){
			<p>Your answer: @correct</p>
			<button @onclick="OnEndLevel">End Level</button>
		}
    }
}
else if (isEndScreen)
{
    <p>Game Over!</p>
    <p>Your score is: @score</p>
    <button @onclick="OnRestartClick">Restart</button>
}

@code {
    [Parameter]
    public int level { get; set; } = 1;

    private int taskTimer = 60;
    private bool isStartScreen = true;
    private bool isReadingScreen = false;
    private bool isQuestionsScreen = false;
    private bool isEndScreen = false;
    private bool isNextButtonEnabled = false;
    private bool isEndButtonEnabled = false;

    private int questionNumber = 1;
    private int numberOfQuestions { get; set; } = 5;

    private bool isButtonsDisabled = false;

    private string[] answers;

    private string[] questions;

    private string question = "";

    private string text = "";

    private string answer1 = "";
    private string answer2 = "";
    private string answer3 = "";
    private string answer4 = "";

    public int readingTime { get; set; } = 60;

    private int[] correctAnswers;

    private int score = 0;

    private string correct = "";

    // Initialize before the component is rendered
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        switch (level)
        {
            case 1:
                text = "Pellentesque ornare fringilla eleifend. Proin facilisis urna mi, non laoreet nisl bibendum vel. Curabitur felis ex, molestie non eleifend eget, rutrum in enim. Etiam neque mauris, gravida at odio et, convallis sollicitudin sem. Aenean tempor erat magna, eu dignissim massa consequat suscipit. Proin hendrerit erat sit amet justo elementum mollis. Maecenas tincidunt, sapien ac venenatis congue, turpis elit congue tellus, dictum posuere magna odio sed sapien. Vestibulum auctor risus fringilla, maximus orci a, iaculis felis. Morbi malesuada ornare egestas. Nam ante nisl, lacinia quis hendrerit quis, fringilla vel ante. Donec pellentesque neque non malesuada suscipit. Sed rhoncus congue magna, elementum facilisis lacus varius nec.";
                numberOfQuestions = 3;
                questions = new string[numberOfQuestions];
                answers = new string[numberOfQuestions * 4];
                correctAnswers = new int[numberOfQuestions];
                questions[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam quis neque lacus.";
                answers[0] = "A. Lorem ipsum dolor sit amet";
                answers[1] = "B. consectetur adipiscing elit";
                answers[2] = "C. Nam quis neque lacus";
                answers[3] = "D. Nulla facilisi";
                correctAnswers[0] = 1;
                questions[1] = "Nulla ultrices eget mauris a venenatis. Fusce nec egestas magna, vitae consequat quam. Curabitur mauris nisi, volutpat eget odio eget, lacinia faucibus ante.";
                answers[4] = "A. Nulla ultrices eget mauris a venenatis";
                answers[5] = "B. Fusce nec egestas magna";
                answers[6] = "C. vitae consequat quam";
                answers[7] = "D. Curabitur mauris nisi";
                correctAnswers[1] = 4;
                questions[2] = "Morbi sodales tellus id arcu convallis cursus. Phasellus semper viverra euismod. Nulla iaculis sapien sit amet vehicula consequat. Vivamus luctus condimentum vulputate.";
                answers[8] = "A. Morbi sodales tellus id arcu convallis cursus";
                answers[9] = "B. Phasellus semper viverra euismod";
                answers[10] = "C. Nulla iaculis sapien sit amet vehicula consequat";
                answers[11] = "D. Vivamus luctus condimentum vulputate";
                correctAnswers[2] = 3;
                break;
        }
    }

    // Make the OnStartClick method async
    private async Task OnStartClick()
    {
        isStartScreen = false;
        isReadingScreen = true;
        await StartTimer(readingTime);
    }

    // Timer function that updates the UI
    private async Task StartTimer(int readingTime)
    {
        taskTimer = readingTime;

        while (taskTimer > 0)
        {
            if (!isReadingScreen)
                break;    
            taskTimer--;
            StateHasChanged();
            await Task.Delay(1000);
        }

        if(isReadingScreen)
            OnReadingFinished();
    }

    // Move to the next phase (questions)
    private void OnReadingFinished()
    {
        PrepareQuestion();
        isReadingScreen = false;
        isQuestionsScreen = true;
        isNextButtonEnabled = false;
        isButtonsDisabled = false;
    }

    // Answer click event
    private void AnswerClick(int answerNumber)
    {
        if (answerNumber == correctAnswers[questionNumber - 1])
        {
            score++;
            correct = "Correct!";
        }
        else
        {
            correct = "Incorrect!";
        }

        if (questionNumber == numberOfQuestions)
        {
            isEndButtonEnabled = true;
        }
        else
        {
            isNextButtonEnabled = true;
        }
        isButtonsDisabled = true;

    }

    // Prepare the question and answers
    private void PrepareQuestion()
    {
        question = questions[questionNumber - 1];
        answer1 = answers[0 + 4 * (questionNumber - 1)];
        answer2 = answers[1 + 4 * (questionNumber - 1)];
        answer3 = answers[2 + 4 * (questionNumber - 1)];
        answer4 = answers[3 + 4 * (questionNumber - 1)];
    }

    // Move to the next question
    private void OnNextQuestion(){
        questionNumber++;
        PrepareQuestion();
        isNextButtonEnabled = false;
        isButtonsDisabled = false;
    }

    // Move to the next phase (End)
    private void OnEndLevel()
    {
        isQuestionsScreen = false;
		isEndScreen = true;
    }

    // Restart the level function
    private void OnRestartClick()
    {
        isEndScreen = false;
        isStartScreen = true;
        isEndButtonEnabled = false;
        questionNumber = 1;
        score = 0;
        taskTimer = readingTime;
    }
}